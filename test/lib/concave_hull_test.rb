require 'test_helper'

require 'concave_hull.rb'

class ConcaveHullTest < ActionController::TestCase
  test 'should compute route' do
    srand(2)
    vector = 50.times.collect{ |i| [rand(0..0.1), rand] }
    vector += 50.times.collect{ |i| [rand, rand(0..0.1)] }
    k = 3

    hull = ConcaveHull::concave_hull(vector, k)

    assert_equal hull, [[0.008448363578819729, 0.00252014237519943], [0.010250039399590904, 0.06293597265828625], [0.022601200319403672, 0.10694568430998297], [0.07649598630333837, 0.16922544658417793], [0.04677874851896128, 0.20174322626496533], [0.029965467739039464, 0.26682727510286663], [0.022030620639615407, 0.34982628500329926], [0.013457994244493565, 0.5135781212657464], [0.012715997185890782, 0.5967453089785958], [0.01622986032507766, 0.7007523466071562], [0.017047713220402227, 0.8816522357485486], [0.05356041766410166, 0.9537422269448667], [0.09938520106815718, 0.9705803133771735], [0.09831534420864697, 0.4413549193548467], [0.08895200593381344, 0.34161365267110966], [0.07974049435492916, 0.2693887975963012], [0.09729106908994523, 0.11277621523807146], [0.11058314779616107, 0.027405925705394876], [0.2008423437754454, 0.038833417804636554], [0.2208379150614619, 0.09184586409961831], [0.26377852928001977, 0.09139154769780906], [0.4144600551329115, 0.08486845191320741], [0.5027787525092214, 0.09567475976057274], [0.6152545734642763, 0.09536599643611166], [0.7483739993410363, 0.08578395173311154], [0.8451131155747016, 0.09885097062553305], [0.9167146119578825, 0.07022642404442812], [0.9259015965084992, 0.057027420861873235], [0.9404504935420885, 0.01021379500986478], [0.7988855115046296, 0.003124756152107888], [0.6235631845621308, 0.017671216065944885], [0.44801471652408964, 0.02070498347452672], [0.29517230521974247, 0.018728654424540216], [0.08756250900112283, 0.0030589478075279787], [0.008448363578819729, 0.00252014237519943]]

    svg_hull = hull.collect{ |i| [i[0]*400, i[1]*400].join ',' }
    svg_hull = ['M'] + svg_hull[0..0] + ['L'] + svg_hull[1..-1]
    svg_hull = svg_hull.join ' '

    points = vector.collect{ |i| "M #{i[0]*400-0.5},#{i[1]*400} L #{i[0]*400+0.5},#{i[1]*400}" }.join ' '

    svg = "<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<svg
   xmlns:dc='http://purl.org/dc/elements/1.1/'
   xmlns:cc='http://creativecommons.org/ns#'
   xmlns:rdf='http://www.w3.org/1999/02/22-rdf-syntax-ns#'
   xmlns:svg='http://www.w3.org/2000/svg'
   xmlns='http://www.w3.org/2000/svg'
   version='1.1'
   width='400'
   height='400'
   xml:space='preserve'>
  <path d='#{svg_hull}' style='stroke-width:1px;stroke:red;fill:none' />
  <path d='#{points}' style='stroke-width:1px;stroke:#000;fill:none' />
</svg>"
    #    puts svg
  end

  test 'should compute specific hull with two points having same x' do
    hull = ConcaveHull::concave_hull([[-0.490117, 43.8901], [-0.490117, 43.890145], [-0.49023, 43.8892], [-0.490458, 43.8887], [-0.490361, 43.890163], [-0.49, 43.89], [-0.492, 43.891]], 5)
    assert_equal hull, [[-0.490458, 43.8887], [-0.492, 43.891], [-0.490117, 43.890145], [-0.49, 43.89], [-0.49023, 43.8892], [-0.490458, 43.8887]]
  end
end
