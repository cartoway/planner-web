upstream planner {
    server web:8080;
}

upstream superset {
    server superset:8088;
}

init_by_lua_block {
    cjson = require("cjson")
}

proxy_cache_path /var/cache/nginx/planner__internal_auth keys_zone=planner__internal_auth:1m;

server {
    listen 8087;
    server_name planner.dev.cartoway.com *.planner.dev.cartoway.com;

    access_log /dev/stdout;
    error_log /dev/stderr;

    location / {
        proxy_set_header Host $http_host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        proxy_pass http://superset;
    }

    location /api/v1/chart/data {
        lua_need_request_body on;
        rewrite_by_lua_block {
            local function get_body_data()
                ngx.req.read_body()
                local body = ngx.req.get_body_data()
                if not body then
                    local body_file = ngx.req.get_body_file()
                    if body_file then
                        local file = io.open(body_file, "rb")
                        if file then
                            body = file:read("*all")
                            file:close()
                        end
                    end
                end
                return body
            end

            local function url_decode(str)
                return str:gsub('+', ' '):gsub('%%(%x%x)', function(h)
                    return string.char(tonumber(h, 16))
                end)
            end

            local function extract_form_field(raw_body, field_name)
                for pair in raw_body:gmatch("[^&]+") do
                    local key, value = pair:match("([^=]+)=(.+)")
                    if key and value then
                        key = url_decode(key)
                        if key == field_name then
                            return url_decode(value)
                        end
                    end
                end

                return nil
            end

            local body_data = get_body_data()
            local content_type = ngx.var.content_type or ""
            if content_type:find("application/x%-www%-form%-urlencoded") then
                body_data = extract_form_field(body_data, "form_data")
                if body_data then
                    if body_data:sub(1, 1) == '`' and body_data:sub(-1) == '`' then
                        ngx.log(ngx.STDERR, "Removing backquotes")
                        body_data = body_data:sub(2, -2)
                    end
                end
            end

            if body_data then
                local json_body = cjson.decode(body_data)
                local filters = json_body['queries'] and json_body['queries'][1] and json_body['queries'][1]['filters']
                for _, filter in pairs(filters) do
                    if filter['col'] == 'customer_id' and filter['op'] == 'IN' and table.getn(filter['val']) == 1 then
                        ngx.req.set_header("X-Customer-ID", filter['val'][1])
                        break
                    end
                end
            end
        }
        auth_request /__internal_auth;

        proxy_set_header Host $http_host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        proxy_pass http://superset;

        error_page 401 =201 /__empty-json__;
    }

    location = /__internal_auth {
        internal;

        if ($http_x_customer_id = '') {
            return 401;
        }

        proxy_pass http://planner/api/0.1/customers/$http_x_customer_id.json;
        error_page 404 =401 /__empty-json__;

        proxy_pass_request_body off; # Required for POST queries
        proxy_set_header Content-Length "";

        proxy_ignore_headers "Set-Cookie"; # Ignore set-cookie to enable cache
        proxy_hide_header "Set-Cookie";
        proxy_ignore_headers "Cache-Control";

        proxy_cache planner__internal_auth;
        proxy_buffering on;
        proxy_cache_key "planner__internal_auth:$http_x_customer_id:$cookie_csrf_token";
        proxy_cache_valid any 1m;
        proxy_cache_lock on;

        proxy_http_version 1.1;
        proxy_set_header Host $http_host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    location = /__empty-json__ {
        internal;
        return 200 "{}";
    }
}
