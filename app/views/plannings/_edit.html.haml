- content_for :title, t('.title')
%div
  .planbar.d-flex.align-items-end
    - if @manage_planning[:manage_edit]
      = render 'flat_form'

#edit-planning.sidebar
  .sidebar-tabs
    %ul{role: "tablist"}
      %li
        %a.d-flex.align-items-center.justify-content-center.btn{href: "#planning-pane", role: "tab"}
          %i.fa.fa-caret-right
  .sidebar-content.modern-scroll
    #planning-pane.sidebar-pane
      #extend_close_panel.row
        .pull-right
          %button.btn.btn-default.btn-sm.extend{title: t('.open_planning_panel'), type: "button"}
            %i.fa.fa-maximize
          %button.btn.btn-default.btn-sm.sidebar-close{title: t('.collapse_planning_panel'), type: "button"}
            %i.fa.fa-caret-left
      #planning_tools.row
        - if @callback_button && @planning.customer.enable_external_callback? && @planning.customer.external_callback_url
          .row
            %p.text-center.col-md-12
              %button#external-callback-btn.btn.btn-primary.btn-sm.customer_external_callback_url{"data-url": external_callback_converted_url(planning_summary(@planning), current_user), type: "button"}
                %i.fa.fa-desktop.fa-fw
                = @planning.customer.external_callback_name || I18n.t('plannings.edit.customer_external_callback_url.action')
        #route_selector.row
        - if (@planning.id && !@planning.tags.empty?) || !@planning.id
          .row
            .d-flex.justify-content-center
              .col-xs-12.col-md-12
                %label
                  = t('activerecord.attributes.planning.tags')
                .row.form-group
                  .input-append
                    #planning_tag_ids_input.input-group
                      = select_tag 'planning[tag_ids]', options_for_select(@planning.customer.tags.map { |tag| [tag.label, tag.id, {'data-color' => tag.color && tag.color[1..-1], 'data-icon' => tag.icon}] }, @planning.tags.collect(&:id)), { multiple: true, include_blank: t('web.form.empty_entry'), class: 'form-control input-group-radiusless', disabled: @planning.id }
                      - if @planning.id
                        %span.input-group-addon.input-group-borderless.borderless-disabled= t("activerecord.attributes.planning.tag_operation.#{@planning.tag_operation}")
                      - else
                        %span.input-group-addon.input-group-borderless.borderless-empty
                        = select_tag 'planning[tag_operation]', options_for_select(t('activerecord.attributes.planning.tag_operation').invert), class: 'form-control tag-operation-field', disabled: @planning.id
                      %span.input-group-addon= content_tag('i', '', class: 'fa fa-tags fa-fw')
                    - unless @planning.id
                      %p.help-block= t('activerecord.attributes.planning.tags_help')
          %br
        - if @planning.customer.vehicle_usage_sets.size > 1
          = bootstrap_form_for @planning, {layout: :horizontal, default_div_class: ''} do |f|
            .d-flex.justify-content-center
              .col-xs-12.col-md-12
                %label
                  = t('activerecord.attributes.planning.vehicle_usage_set_id')
                = f.collection_select :vehicle_usage_set_id, @planning.customer.vehicle_usage_sets, :id, :name, { control_col: 'col-xs-12 col-md-12', label: '', label_class: 'd-none' }, {required: true, control_class: 'form-control' }
                .d-flex.justify-content-center
                  = f.submit message: t('plannings.edit.vehicle_usage_set.action'), button: 'btn btn-default'
        - if @manage_planning[:manage_zoning]
          .d-flex.justify-content-center
            .col-xs-12.col-md-12
              = bootstrap_form_for [:apply_zonings, @planning], { layout: :horizontal, default_div_class: '', html: { id: "planning_zoning_#{@planning.id}", class: 'form-horizontal update-zonings-form', title: t('plannings.edit.zonings.label') }} do |f|
                %label
                  = t('plannings.edit.zonings.label')
                = zoning_select f, @planning
                .d-flex.justify-content-center
                  = f.submit message: t('plannings.edit.zonings.action'), button: "btn #{@planning.zoning_outdated ? 'btn-warning' : 'btn-default'}", title: @planning.zoning_outdated && t('.outdated_zoning')
      #global_tools.row
        .btn-group
          %button#optimize_all.btn.btn-primary.btn-sm.optimize{title: t('.optimize'), type: "button", "data-toggle": "modal", "data-target": "#optimization-modal" }
            %i.fa.fa-gears
            = t('plannings.edit.dialog.optimization.optimize')
        .pull-right.btn-group
          .dropdown.btn-group
            %a#toggle_routes_dropdown_button.btn.btn-default.btn-sm.dropdown-toggle{"data-toggle": "dropdown", title: t('.toggle_routes'), type: "button"}
              %i.fa.fa-eye
              %span.caret
            -# https://github.com/twbs/bootstrap/issues/1411
            %ul#toggle_routes_dropdown.dropdown-menu{role: "menu"}
              %li{"data-selection": "none"}
                %a.active_none{href: "#"}
                  %i.fa.fa-eye-slash.fa-fw
                  = t 'plannings.edit.active_none'
              %li{"data-selection": "reverse"}
                %a.active_reverse{href: "#"}
                  %i.fa.fa-random.fa-fw
                  = t 'plannings.edit.active_reverse'
              %li{"data-selection": "all"}
                %a.active_all{href: "#"}
                  %i.fa.fa-eye.fa-fw
                  = t 'plannings.edit.active_all'
          .dropdown.btn-group
            %a.btn.btn-default.btn-sm.dropdown-toggle{"data-toggle": "dropdown", title: t('.toggle_route_data'), type: "button"}
              %i.fa.fa-chart-column
              %span.caret
            -# https://github.com/twbs/bootstrap/issues/1411
            %ul#data_routes_dropdown.dropdown-menu{role: "menu"}
              %li{"data-selection": "none"}
                %a.active_none{href: "#"}
                  %i.fa.fa-angle-left.fa-fw{style: "transform: rotate(-45deg);"}
                  = t 'plannings.edit.active_none'
              - if planning_quantities(@planning).any?
                %li{"data-selection": "simple"}
                  %a.active_simple{href: "#"}
                    %i.fa.fa-chart-column.fa-fw
                    = t 'plannings.edit.active_simple'
              %li{"data-selection": "all"}
                %a.active_all{href: "#"}
                  %i.fa.fa-square-poll-vertical.fa-fw
                  = t 'plannings.edit.active_all'
          .dropdown.btn-group
            %a.btn.btn-default.btn-sm.dropdown-toggle{"data-toggle": "dropdown", title: t('.lock_routes'), type: "button"}
              %i.fa.fa-unlock
              %span.caret
            -# https://github.com/twbs/bootstrap/issues/1411
            %ul#lock_routes_dropdown.dropdown-menu{role: "menu"}
              %li{"data-selection": "none"}
                %a.active_none{href: "#"}
                  %i.fa.fa-unlock.fa-fw
                  = t 'plannings.edit.active_none'
              %li{"data-selection": "reverse"}
                %a.active_reverse{href: "#"}
                  %i.fa.fa-random.fa-fw
                  = t 'plannings.edit.active_reverse'
              %li{"data-selection": "all"}
                %a.active_all{href: "#"}
                  %i.fa.fa-lock.fa-fw
                  = t 'plannings.edit.active_all'
          - if @manage_planning[:manage_export]
            .dropdown.btn-group
              %a.btn.btn-default.btn-sm.right.export.dropdown-toggle{"data-toggle": "dropdown", title: t('.exports'), type: "button"}
                %i.fa.fa-share-nodes
                %span.caret
              %ul.dropdown-menu
                %li.dropdown-header
                  %h5
                    = t('plannings.edit.all_plannings_related')
                %hr
                  - if current_user.customer.enable_external_callback? && current_user.customer.external_callback_url
                    %li.link.customer_external_callback_url{ data: { url: external_callback_converted_url(planning_summary(@planning), current_user) } }
                      %i.fa.fa-desktop.fa-fw
                      = current_user.customer.external_callback_name || t('plannings.edit.customer_external_callback_url.action')
                    %li.divider{role: "separator"}
                - @planning.customer.device.configured_definitions.each do |key, definition|
                  - if key == :deliver && @planning.customer.enable_sms
                    %li
                      = link_to planning_modal_path(@planning, modal: 'sms_drivers'), remote: true, format: 'js', 'data-toggle': "modal", 'data-target': "#planning-send-sms-drivers-modal", 'data-keyboard': "true", id: 'send-sms-drivers' do
                        %i.fa.fa-fw.fa-comment-sms
                        = t('plannings.edit.deliver_send.plural.send_sms')
                  - if @planning.routes.any?{ |route| route.vehicle_usage_id && !route.vehicle_usage.vehicle.devices.key?(definition[:device]) }
                    - definition[:route_operations].each do |route_operation|
                      - options = { planning_id: "#{@planning.id}" }
                      - options.merge!({ toggle: 'tooltip', title: "#{t(plannings.edit.tomtom_send_waypoints.title).html_safe}" }) if route_operation.is_a?(Hash) && route_operation[:send].to_s == 'waypoints'
                      - options.merge!({ service: "#{definition[:device]}", operation: "#{route_operation.is_a?(Hash) ? route_operation.keys[0] : route_operation}" })
                      %li.link.device-operation{data: options}
                        %i.fa.fa-fw{ class: (route_operation == :clear ? 'fa-rectangle-xmark' : 'fa-mobile fa-rotate-90') }
                          - translation = "#{definition[:device]}_#{route_operation.is_a?(Hash) ? route_operation.keys[0].to_s + '_' + route_operation.values[0].to_s : route_operation.to_s}.plural.action"
                        = t("plannings.edit.#{translation}")
                    - if definition[:route_operations].any?
                      %li.divider{role: "separator"}
                %li
                  = link_to api_web_v01_print_planning_path(@planning), target: :_blank do
                    %i.fa.fa-print.fa-fw
                    = t '.export.print'
                %li.divider{role: "separator"}
                %li
                  %a.export_spreadsheet
                    %i.fa.fa-table.fa-fw
                    = t '.export.spreadsheet'
                %li.divider{role: "separator"}
                %li
                  = link_to api_planning_calendar_path(@planning, api_key: current_user.api_key) do
                    %i.fa.fa-calendar.fa-fw
                    = t '.export.icalendar.action'
                - if @planning.routes.any?{|route| route.vehicle_usage_id && !route.vehicle_usage.vehicle.contact_email.blank? }
                  %li.icalendar_email{"data-email": "true"}
                    = link_to api_planning_calendar_path(@planning, email: 1) do
                      %i.fa.fa-envelope.fa-fw
                      = t '.export.icalendar.action_email'
                - if @planning.customer.enable_sms && @planning.customer.reseller.messagings.any?{ |_k, v| v['enable'] == true }
                  %li.divider{role: "separator"}
                  %li
                    %a.send_sms{href: "/api/0.1/plannings/#{@planning.id}/send_sms"}
                      %i.fa.fa-mobile.fa-fw
                      = t '.send_sms'
                %li.divider{role: "separator"}
                %li
                  %a.historize{href: "/api/0.1/plannings/#{@planning.id}/historize"}
                    %i.fa.fa-chart-line.fa-fw
                    = t '.historize'
            - if @manage_planning[:manage_print]
              = link_to api_web_v01_print_planning_path(@planning), class: 'btn btn-default btn-sm', title: t('.export.print'), target: :_blank do
                %i.fa.fa-print.fa-fw
      #planning.row

#map.sidebar-map

#planning-refresh-modal.modal.fade{role: "dialog", tabindex: "-1"}
  .modal-dialog
    .modal-content
      .modal-header
        %button.close{type: "button", "data-dismiss": "modal"}
          &times;
        %h4.modal-title
          %i.fa.fa-refresh.fa-fw
          = t('plannings.edit.dialog.refresh.title')
      .modal-body
        .container-fluid
          .row
            = t('plannings.edit.dialog.refresh.confirm')
      .modal-footer
        %button.btn.btn-default{type: "button", "data-dismiss": "modal"}
          = t('all.verb.dismiss')
        %button#refresh-modal.btn.btn-primary{type: "button"}
          = t('plannings.edit.refresh')

#planning-move-stops-modal.modal.fade{role: "dialog", tabindex: "-1"}
  .modal-dialog
    .modal-content
      %form
        .modal-header
          %button.close{type: "button", "data-dismiss": "modal"}
            &times;
          %h4.modal-title
            %i.fa.fa-external-link.fa-fw
            = t('plannings.edit.dialog.move_stops.title')
        .modal-body.routes
        .clearfix
        .modal-footer
          %button#move-stops-modal.btn.btn-primary{type: "button"}
            = t('plannings.edit.move_stops')

#planning-send-sms-drivers-modal.modal.fade{role: "dialog", tabindex: "-1"}

= render partial: 'layouts/modal_csv'

= render partial: 'plannings/optimization'

= render partial: 'zonings/isoline'

:ruby
  layers = (current_user.customer.profile.layers + [current_user.layer]).sort_by(&:id).uniq.collect{ |layer|
    {
      name: layer.translated_name,
      url: request.ssl? ? layer.urlssl : layer.url,
      attribution: layer.map_attribution,
      default: layer == current_user.layer,
      overlay: layer.overlay
    }
  }
  stops_count = 0
  large_plannning = @planning.routes.select{ |route| !route.hidden || !route.locked || route.vehicle_usage_id.nil? }.any?{ |r| (stops_count += r.stops_size) >= 1000 }

  controller.js(
    export_settings: current_user.export_settings,
    manage_planning: @manage_planning,
    with_stops: !large_plannning,
    prefered_unit: current_user.prefered_unit,
    planning_id: @planning.id,
    planning_ref: @planning.ref,
    user_api_key: current_user.api_key,
    routes_array: @planning.routes.map{ |r|
      {
        route_id: r.id,
        color: r.default_color,
        vehicle_usage_id: r.vehicle_usage_id,
        name: !r.vehicle_usage_id ? t("plannings.edit.out_of_route") : (r.ref ? (r.ref + ' ') : '') + r.vehicle_usage.vehicle.name,
        ref: r.ref,
        outdated: r.outdated,
        fleet_user: r.vehicle_usage ? r.vehicle_usage.vehicle.devices[:fleet_user] : ''
      }
    },
    zoning_ids: @planning.zonings.collect(&:id),
    map_layers: Hash[layers.map{ |l| l[:name] }.zip(layers)],
    map_lat: @planning.vehicle_usage_set.vehicle_usages.active.collect(&:default_store_start).compact.find{ |s| s.lat }.try(:lat) || @planning.customer.default_position[:lat],
    map_lng: @planning.vehicle_usage_set.vehicle_usages.active.collect(&:default_store_start).compact.find{ |s| s.lng }.try(:lng) || @planning.customer.default_position[:lng],
    vehicles_array: planning_vehicles_array(@planning),
    vehicles_usages_map: planning_vehicles_usages_map(@planning),
    quantities: planning_quantities(@planning),
    color_codes: COLORS_TABLE,
    colors_by_route: Hash[@planning.routes.select(&:vehicle_usage).map{ |r| [r.id, r.default_color] }],
    disable_clusters: !large_plannning,
    url_click2call: current_user.link_phone_number,
    spreadsheet_columns: @spreadsheet_columns,
    available_stop_status: @planning.customer.enable_stop_status && @planning.customer.device.available_stop_status?,
    update_stop_status: @planning.customer.enable_stop_status? && (@planning.date.nil? || @planning.date.between?(Time.now.beginning_of_day, Time.now.end_of_day)) && @planning.customer.device.available_stop_status?,
    callback_button: @callback_button,
    available_temperature: available_temperature?,
    devices: planning_devices(@planning.customer),
    optimization_duration: optimization_duration(@planning.customer)
  )
