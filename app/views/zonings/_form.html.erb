<% options = {layout: :horizontal}
options.merge!(url: "/api-web/0.1/zonings/#{@zoning.id}/#{params[:action]}") if params[:controller] =~ /api_web/
options.merge!(default_div_class: 'col-lg-10 col-md-10') if @zoning.id %>
<%= twitter_bootstrap_form_for @zoning, options do |f| %>
  <%= render 'shared/error_messages', model: @zoning %>
  <% if @manage_zoning[:manage_edit] %>
    <div title="<%= t('activerecord.attributes.zoning.name') %>">
      <%= f.text_field :name, required: true %>
    </div>
  <% end %>
  <% if @manage_zoning[:manage_edit] || @manage_zoning[:manage_organize] %>
    <% if @plannings && !@plannings.empty? %>
      <div class="form-group">
        <label class="col-md-2 control-label" for="planning_id"><%= t '.planning_id' %></label>
        <div class="col-md-6">
          <%= select_tag 'planning_id', options_from_collection_for_select(@plannings, "id", "name", @planning? @planning.id : nil), include_blank: true, class: 'form-control' %>
          <p class="help-block"><%= t '.planning_id_help' %></p>
        </div>
      </div>
    <% end %>
    <%= f.actions do %>
      <%= f.submit %>
    <% end %>
  <% end %>
  <% if @zoning.id %>
    <hr>
    <div class="form-group">
      <% if @planning %>
        <div class="col-md-12">
          <p class="help-block"><%= t('.stops_from_planning', s: @planning.name) %></p>
          <% unless @planning.routes.reject(&:vehicle_usage_id).all?(&:hidden) %>
            <%= check_box_tag :hide_out_of_route %>
            <%= label_tag :hide_out_of_route, t(".hide_out_of_route") %>
          <% end %>
        </div>
      <% else %>
        <div class="col-md-12">
          <label><input type="checkbox" name="all-destinations"> <%= t '.all_destinations' %> <i class="fa fa-bolt fa-fw" title="<%= t '.from_planning_help' %>"></i></label>
        </div>
      <% end %>
      <% if @manage_zoning[:manage_organize] %>
        <div class="col-md-offset-2 col-md-10">
          <button type="button" class="btn btn-primary dropdown-toggle" id="generate" data-toggle="dropdown" aria-expanded="false"<% if @isochrone.empty? && @isodistance.empty? && !@planning %> style="display: none;"<% end %>><i class="fa fa-magic fa-fw"></i> <%= t '.generate' %> <span class="caret"></span></button>
          <ul class="dropdown-menu" role="menu">
            <% if !@isochrone.empty? || !@isodistance.empty? %>
              <% if !@isochrone.empty? %>
                <li><a data-toggle="modal" data-target="#isochrone-modal" data-keyboard="true" href="#"><i class="fa fa-stopwatch fa-fw"></i> <%= t '.isochrone' %></a></li>
              <% end %>
              <% if !@isodistance.empty? %>
                <li><a data-toggle="modal" data-target="#isodistance-modal" data-keyboard="true" href="#"><i class="fa fa-road fa-fw"></i> <%= t '.isodistance' %></a></li>
              <% end %>
              <li class="divider"></li>
            <% end %>
            <% if @planning %>
              <li><a href="#" id="from_planning"><i class="fa fa-calendar fa-fw"></i> <%= t '.from_planning' %></a></li>
              <li class="divider"></li>
            <% end %>
            <% zoning_vehicles(@zoning, @planning, active: true).count.times{ |n| %>
              <li><a href="#" class="automatic<% if !@planning %> disabled<% end %>" data-n="<%= n + 1 %>"><i class="fa fa-magic fa-fw"></i> <%= t('.automatic', count: n + 1) %></a></li>
            <% } %>
          </ul>
        </div>
      <% end %>
    </div>
  <% end %>
  <div id="zones"></div>
<% end %>

<% if @zoning.id %>
  <%
    layers = (current_user.customer.profile.layers + [current_user.layer]).sort_by(&:id).uniq.collect{ |layer|
      {
        name: layer.translated_name,
        url: request.ssl? ? layer.urlssl : layer.url,
        attribution: layer.map_attribution,
        default: layer == current_user.layer,
        overlay: layer.overlay
      }
    }
    stops_count = 0

    controller.js(
      manage_zoning: @manage_zoning,
      prefered_unit: current_user.prefered_unit,
      zoning_id: @zoning.id,
      zoning_details: zoning_details(@zoning),
      planning_id: @planning ? @planning.id : nil,
      out_of_route_id: @planning ? @planning.routes.find{ |r| !r.vehicle_usage_id }.id : nil,
      routes_array: @planning ? @planning.routes.map{ |r| {route_id: r.id, outdated: r.outdated} } : [],
      map_layers: Hash[layers.map{ |l| l[:name] }.zip(layers)],
      map_lat: (@planning && @planning.vehicle_usage_set.vehicle_usages.active.collect(&:default_store_start).compact.find{ |s| s.lat }.try(:lat)) || @zoning.customer.default_position[:lat],
      map_lng: (@planning && @planning.vehicle_usage_set.vehicle_usages.active.collect(&:default_store_start).compact.find{ |s| s.lng }.try(:lng)) || @zoning.customer.default_position[:lng],
      vehicles_array: zoning_vehicles(@zoning, @planning, active: true).map{|vehicle| vehicle.slice(:id, :name, :color).merge(router_avoid_zones: vehicle.default_router.avoid_zones) },
      vehicles_map: zoning_vehicles(@zoning, @planning).each_with_object({}){|vehicle, hash| hash[vehicle.id] = vehicle.slice(:id, :name, :color).merge(router_avoid_zones: vehicle.default_router.avoid_zones, capacities: vehicle.default_capacities.map{ |k, v| {unit_id: k, capacity: v, unit_label: @zoning.customer.deliverable_units.find{ |du| du.id == k }.label, unit_icon: @zoning.customer.deliverable_units.find{ |du| du.id == k }.default_icon } }) },
      colors_by_route: @planning ? Hash[@planning.routes.select(&:vehicle_usage).map{ |r| [r.id, r.default_color] }] : {},
      disable_clusters: @planning ? @planning.routes.all?{ |r| (stops_count += r.stops.size) < 1000 } : @zoning.customer.destinations.size < 1000,
      deliverable_units: @zoning.customer.deliverable_units.map{ |du| {unit_id: du.id, unit_label: du.label, unit_icon: du.default_icon} },
      url_click2call: current_user.link_phone_number,
      show_deliverable_units: !@zoning.customer.enable_orders
    )
  %>
<% end %>
