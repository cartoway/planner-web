= bootstrap_form_for(@store, layout: :horizontal, html: {class: "form-horizontal", "data-destination_id" => (@store.id or 0)}) do |f|
  = render 'shared/error_messages', model: @store
  %fieldset#destination-details
    - if @store.customer.enable_references
      = f.text_field :ref, help: t('.ref_help')
    = f.text_field :name, required: true
    = f.text_field :street, { help: t('web.form.helpers.street'), class: "form-control pointing", append: content_tag('button', content_tag('i', '', class: 'fa fa-crosshairs fa-fw'), class: 'btn btn-default', type: 'button', title: t('.locate_manually'))}
    #store_city_input.form-group
      %label.sr-only{for: "store_postalcode"}= t 'activerecord.attributes.store.postalcode'
      %label.sr-only{for: "store_city"}= t 'activerecord.attributes.store.city'
      %label.col-md-offset-2.col-md-8.field
        = t 'activerecord.attributes.store.postalcode'
        \/ #{t 'activerecord.attributes.store.city'}
      .col-md-offset-2.col-md-8.field
        .input-group
          = text_field :store, :postalcode, maxlength: 17, class: 'form-control width_1_2'
          = text_field :store, :city, class: 'form-control width_1_2'
          %span.input-group-addon
            %i.fa.fa-map.fa-fw
    - if !@store.customer.with_state?
      #store_country_input.form-group
        %label.col-md-offset-2.col-md-8.field
          = "#{t('activerecord.attributes.store.state')}/#{t('activerecord.attributes.store.country')}"
        .col-md-offset-2.col-md-8.field
          .input-group
            = text_field :store, :state, class: 'form-control width_1_2'
            = text_field :store, :country, placeholder: t('.country_default', n: @store.customer.default_country), class: 'form-control width_1_2'
            %span.input-group-addon
              %i.fa.fa-map.fa-fw
    - else
      = f.text_field :country, {placeholder: t('.country_default', n: @store.customer.default_country)}
    .form-group
      %label.col-md-offset-2.col-md-8.field{for: "store_geocoding"}= t 'activerecord.attributes.stores.geocoding_accuracy'
      .col-md-offset-2.col-md-8.field
        #geocoding_accuracy{ class: ('d-none' unless @store.geocoding_accuracy) }
          #geocoding-progress.progress
            %input{name: "store[geocoding_accuracy]", type: "hidden", value: @store.geocoding_accuracy}
            .progress-bar{ class: "progress-bar-#{@store.geocode_progress_bar_class}", style: "width: #{((@store.geocoding_accuracy || 0) * 100).round}%"}
              %span= @store.geocoding_accuracy ? ((@store.geocoding_accuracy || 0) * 100).round.to_s + '%' : ''
          %p.help-block= t 'destinations.form.geocoding_accuracy_help'
          #geocoding_fail.d-none
            = t 'destinations.form.geocoding_fail'
            \-
            %a.pointing{href: "#", role: "button"}
              %i.fa.fa-crosshairs.fa-fw
              = t '.locate_manually'
        #no_geocoding_accuracy{ class: ('d-none' if @store.geocoding_accuracy)}
          = t 'destinations.form.geocoding_accuracy_none'
        #geocoding_level{ class: ('d-none' unless @store.geocoding_level)}
          %input{name: "store[geocoding_level]", type: "hidden", value: @store.geocoding_level}
          %i#geocoding-level-point.fa.fa-map-marker.fa-fw.geocoding-level{ class: ('d-none' unless @store.point?)}
          %i#geocoding-level-house.fa.fa-store.fa-fw.geocoding-level{ class: ('d-none' unless @store.house?)}
          %i#geocoding-level-point.fa.fa-intersection.fa-fw.geocoding-level{ class: ('d-none' unless @store.intersection?)}
          %i#geocoding-level-house.fa.fa-street.fa-fw.geocoding-level{ class: ('d-none' unless @store.street?)}
          %i#geocoding-level-point.fa.fa-city.fa-fw.geocoding-level{ class: ('d-none' unless @store.city?)}
          %span
            = t 'activerecord.attributes.stores.geocoding_level'
            \:
            %span#geocoding-level-value
              - if @store.geocoding_level
                = t("destinations.form.geocoding_level.#{@store.geocoding_level}")
      #geocoding_result.col-md-offset-2.col-md-8.field{ class: ('d-none' if @store.geocoding_result.empty?)}
        %label= t 'activerecord.attributes.stores.geocoding_result'
        %input.form-control{ name: "store[displayed_geocoding_result]", value: @store.geocoding_result['free'], readonly: 'readonly'}
      .col-md-offset-2.col-md-8.field
        #reverse-geocode
    .form-group
      .col-md-offset-2.col-md-offset-2.col-md-8.field
        #map.map-fixed-size
    #store_geoloc_input.form-group
      %label.sr-only{for: "store_lat"}= t 'activerecord.attributes.store.lat'
      %label.sr-only{for: "store_lnt"}= t 'activerecord.attributes.store.lng'
      %label.col-md-offset-2.col-md-8.field
        = t 'activerecord.attributes.store.lat'
        \/ #{t 'activerecord.attributes.store.lng'}
      .col-md-offset-2.col-md-8.field
        .input-group
          = number_field :store, :lat, step: 'any', class: 'form-control width_1_2'
          = number_field :store, :lng, step: 'any', class: 'form-control width_1_2'
          %span.input-group-addon
            %i.fa.fa-globe.fa-fw
    #store_color_input.form-group
      %label.col-md-offset-2.col-md-8.field= t 'activerecord.attributes.store.color'
      .col-md-offset-2.col-md-8.field
        .input-group
          = select_tag 'store[color]', options_for_select((COLORS_TABLE + [customised_color_verification(@store[:color])]).compact.uniq, @store.color), include_blank: '#000000'
          %i#customised_color_picker.fa.fa-paint-brush{title: "#{t('activerecord.attributes.store.customised_color')}"}
          = color_field :store, :color, option = { value: customised_color_verification(@store[:color]), id: 'color_picker', name: 'fff' }
    #store_icon_input.form-group
      %label.col-md-offset-2.col-md-8.field{for: "store_icon"}= t 'activerecord.attributes.store.icon'
      %label.sr-only{for: "store_icon_size"}= t 'activerecord.attributes.store.icon_size'
      .col-md-offset-2.col-md-8.field
        .input-group
          = select_tag 'store[icon]', grouped_options_for_select([                                                                                                                   |
            [t('stores.form.prefered_icons'),                                                                                                                                       |
              @grouped_icons[0].map{ |icon| [icon, icon, {:data => {:content => "<i class='fa fa-fw #{icon}'></i> #{icon}"}, :selected => (@store.icon == icon) ? true : nil }]},], |
              [t('stores.form.other_icons'),                                                                                                                                        |
                @grouped_icons[1].map{ |icon| [icon, icon, {:data => {:content => "<i class='fa fa-fw #{icon}'></i> #{icon}"}, :selected => (@store.icon == icon) ? true : nil }]}   |
              ]                                                                                                                                                                      |
            ]), include_blank: t('web.form.default', n: 'fa-store'), class: 'form-control width_1_2 selectpicker', 'data-live-search' => true                                        |
          = select_tag 'store[icon_size]', options_for_select([[t('.icon_size.small'), :small], [t('.icon_size.medium'), :medium], [t('.icon_size.large'), :large]], @store.icon_size), include_blank: t('web.form.default', n: t('.icon_size.large')), class: 'form-control width_1_2'
          %span.input-group-addon= content_tag('i', '', class: 'fa fa-store fa-fw')

  = hidden_field :store, :geocoder_version, :value => @store.geocoder_version
  = hidden_field :store, :geocoded_at, :value => @store.geocoded_at
  = f.submit

:ruby
  layers = (current_user.customer.profile.layers + [current_user.layer]).sort_by(&:id).uniq.collect{ |layer|
    {
      name: layer.translated_name,
      url: request.ssl? ? layer.urlssl : layer.url,
      attribution: layer.map_attribution,
      default: layer == current_user.layer,
      overlay: layer.overlay
    }
  }
  controller.js(
    destination_id: @store.id || 0,
    map_layers: Hash[layers.map{ |l| l[:name] }.zip(layers)],
    map_lat: @store.lat || @store.customer.default_position[:lat],
    map_lng: @store.lng || @store.customer.default_position[:lng],
    enable_multi_visits: @store.customer.enable_multi_visits
  )
