<% javascript 'api_web/v01/route' %>

<div id="map"></div>
<% if !@routes.select{ |route| route.vehicle_usage_id && route.stops_size > 0 }.empty? %>
  <div id="routes-caption" class="map-caption">
    <% @routes && @routes.each do |route| %>
      <% if route.vehicle_usage_id && route.stops_size > 0 %>
        <div class="map-caption-item">
          <span class="color_small" style="background: <%= route.default_color %>"></span>
          <%= route.vehicle_usage.vehicle.name %>
          <% if !route.start.nil? && !route.end.nil? %>
          <br/>
          <%= t '.departure' %> <%= route.start_time %> <%= '(+' + number_of_days(route.start).to_s + ')' if number_of_days(route.start) %> / <%= t '.arrival' %> <%= route.end_time %> <%= '(+' + number_of_days(route.end).to_s + ')' if number_of_days(route.end) %>
          <% end %>
        </div>
      <% end %>
    <% end %>
  </div>
<% end %>
<%
layers = (current_user.customer.profile.layers + [current_user.layer]).sort_by(&:id).uniq.collect{ |layer|
  {
    name: layer.translated_name,
    url: request.ssl? ? layer.urlssl : layer.url,
    attribution: layer.map_attribution,
    default: @layer ? layer == @layer : layer == current_user.layer,
    overlay: layer.overlay
  }
}
stops_count = 0

controller.js(
  prefered_unit: current_user.prefered_unit,
  planning_id: @planning.id,
  route_ids: @routes ? @routes.collect(&:id) : nil,
  out_of_route_id: @planning.routes.find{ |r| !r.vehicle_usage_id },
  routes_array: @routes ? @routes.map{ |r| {route_id: r.id, outdated: r.outdated} } : [],
  colors_by_route: Hash[@routes.select(&:vehicle_usage).map{ |r| [r.id, r.default_color] }],
  disable_clusters: @disable_clusters || @routes.all?{ |r| (stops_count += r.stops_size) < 1000 },
  print: params[:print],
  map_layers: Hash[layers.map{ |l| l[:name] }.zip(layers)],
  map_lat: @planning.vehicle_usage_set.vehicle_usages.collect(&:default_store_start).compact.find{ |s| s.lat }.try(:lat) || @planning.customer.default_position[:lat],
  map_lng: @planning.vehicle_usage_set.vehicle_usages.collect(&:default_store_start).compact.find{ |s| s.lng }.try(:lng) || @planning.customer.default_position[:lng],
  map_attribution: current_user.layer.map_attribution,
)
%>
